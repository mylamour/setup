#!/bin/bash

echo "${RED}${HIGHLIGHT}Script Running On the Remote Server Now ${NC}"

# use build to run demo code quickly
# mainly focus on build script in github
BASEDIR="/home/ubuntu/"

install_dict() {
    echo "[Info]: Starting to ${FUNCNAME[0]/_/ }"
    mkdir -p dict && cd dict
    git clone https://github.com/1N3/IntruderPayloads &
    git clone https://github.com/Bo0oM/fuzz.txt &
    git clone https://github.com/gh0stkey/Web-Fuzzing-Box &
    git clone https://github.com/payloadbox/xxe-injection-payload-list &
    echo "${GREEN}[Succeed]${NC}: Installed Successful"
}

install_bounty_domain(){
    echo "Get Bounty Domains"
}

install_scan(){
    echo "[Info]: Starting to ${FUNCNAME[0]/_/ }"
    rm -rf scantools

    echo "[Info]: Starting to install subDomainsBrute"
    mkdir -p scantools && cd scantools
    python3 -m venv scanenv && source scanenv/bin/activate 
    pip3 install aiodns # for subDomainBrute
    git clone https://github.com/lijiejie/subDomainsBrute

    echo "[Info]: Starting to install Sublist3r"
    git clone https://github.com/aboul3la/Sublist3r
    pip3 install -q -r Sublist3r/requirements.txt

    echo "[Info]: Starting to install dirsearch"
    git clone https://github.com/maurosoria/dirsearch.git
    pip3 install -q -r dirsearch/requirements.txt
    
    echo "[Info]: Starting to install dirdar"
    wget -q -O DirDar.zip https://github.com/M4DM0e/DirDar/releases/download/v1.0.0/DirDarV1.0-linux64.zip
    unzip DirDar.zip && sudo mv releases/dirdar /usr/local/bin

    echo "[Info]: Starting to install whatwaf"
    git clone https://github.com/Ekultek/WhatWaf/
    pip3 install -q -r WhatWaf/requirements.txt

    echo "[Info]: Starting to install CMSeek"
    git clone https://github.com/Tuhinshubhra/CMSeeK
    pip3 install -q -r CMSeeK/requirements.txt

    echo "[Info]: Starting to install XSStrike"
    git clone https://github.com/s0md3v/XSStrike
    pip3 install -q -r XSStrike/requirements.txt

    # git clone https://github.com/epsylon/xsser
    # sudo apt-get install -y python3-pycurl python3-bs4 python3-geoip python3-gi python3-cairocffi python3-selenium firefoxdriver

    echo "[Info]: Starting to install naabu"
    sudo apt install -y libpcap-dev
    wget -q -O naabu.zip https://github.com/projectdiscovery/naabu/releases/download/v2.0.5/naabu_2.0.5_linux_amd64.zip
    unzip naabu.zip && sudo mv naabu /usr/local/bin/
    echo "${GREEN}[Succeed]${NC}: Installed Successful"

}

install_fuzz(){
    echo "[Info]: Starting to ${FUNCNAME[0]/_/ }"
    wget -q -O ffuf.tar.gz https://github.com/ffuf/ffuf/releases/download/v1.3.1/ffuf_1.3.1_linux_amd64.tar.gz
    sudo mv ffuf /usr/local/bin/
    echo "${GREEN}[Succeed]${NC}: Installed Successful"
}

install_dataleak(){
    rm -rf dataleak
    echo "[Info]: Starting to ${FUNCNAME[0]/_/ }"
    
    mkdir -p dataleak && cd dataleak
    python3 -m venv leakenv && source leakenv/bin/activate 

    git clone https://github.com/UnkL4b/GitMiner
    pip3 install -q -r GitMiner/requirements.txt
    
    git clone https://github.com/wuseman/EMAGNET && chmod +x EMAGNET/emagnet.sh
    
    git clone https://github.com/jordanpotti/AWSBucketDump
    pip3 install -q -r AWSBucketDump/requirements.txt
    
    echo "${GREEN}[Succeed]${NC}: Installed Successful"
}

isntall_toolx(){
    echo "[Info]: Starting to ${FUNCNAME[0]/_/ }"
    git clone https://github.com/rajkumardusad/Tool-X.git
    cd Tool-X
    chmod +x install
    printf 'Y\n' | ./install
    echo "${GREEN}[Succeed]${NC}: Installed Successful"
}

install_allinoneplatform() {
    # rengine was all in one platform
    mkdir -p ~/allinoneplatform
    cd allinoneplatform
    
    echo "[Info]: Starting to ${FUNCNAME[0]/_/ }"

    echo "[Info]: Starting to install rengine"
    # will install docker automatically
    git clone https://github.com/yogeshojha/rengine && cd rengine

    authpass=$(pwgen -s -1 18)
    pgpass=$(pwgen -s -1 18)

    sed -i "s/AUTHORITY_PASSWORD=.*/AUTHORITY_PASSWORD=$authpass/g" .env
    sed -i "s/POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=$pgpass/g" .env

    chmod +x ./install.sh && sudo ./install.sh

    # sudo docker stop rengine_web_1
    # sudo docker exec -i rengine_db_1 psql -U rengine postgres -c "DROP DATABASE rengine;"
    # sudo docker exec -i rengine_db_1 psql -U rengine postgres -c "CREATE DATABASE rengine;"
    # cat /tmp/rengine_dump_.sql | sudo docker exec -i rengine_db_1 psql -U rengine -d rengine
    # rm /tmp/rengine_dump_.sql


    # use  ·make username· to create user
    echo "[Info]: Starting to install sn1per"
    sudo docker pull xer0dayz/sn1per
    echo "${GREEN}[Succeed]${NC}: Installed Successful"
}

install_proxy() {
    echo "[Info]: Starting to ${FUNCNAME[0]/_/ }"

    echo "[Info]: Get Proxy List" 
    # Download and save to local file `proxt-list.txt` with format `IP:PORT`
    curl -sSf "https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt" > proxy-list.txt

    echo "[Info]: Starting to install zap"
    # need java runtime
    wget -q -O zap.tar.gz https://github.com/zaproxy/zaproxy/releases/download/v2.11.1/ZAP_2.11.1_Linux.tar.gz
    tar -xf zap.tar.gz
    if ! command -v java &>/dev/null; then
        echo "[Warning] java env not found, let's install"
        sudo bash /tmp/runtime java
    fi

    echo "[Info]: Starting to install hetty"
    wget -q -O hetty.tar.gz https://github.com/dstotijn/hetty/releases/download/v0.6.0/hetty_0.6.0_Linux_x86_64.tar.gz
    tar -xf hetty.tar.gz
    echo "${GREEN}[Succeed]${NC}: Installed Successful"

}


install_xrdp() {
    # TODO: need to test and change xrdp password and change root password
    # NOTE: 2c/4g at least , extreme slowly
    echo "[Info]: Starting to ${FUNCNAME[0]/_/ }"
    sudo apt-get update
    sudo apt-get install xubuntu-desktop xfce4 xfce4-goodies xrdp xfconf tasksel
    sudo adduser xrdp ssl-cert && sudo systemctl restart xrdp
    echo "startxfce4" > ~/.Xsession
    chmod +x ~/.Xsession
    sudo systemctl restart xrdp.service
    # there was a script wget https://www.c-nergy.be/downloads/xrdp-installer-1.2.2.zip
    # printf '2\n' | sudo apt-get install -y ubuntu-desktop 
    #  use lightdm
    # X -configure && X -config /root/xorg.conf.new &


    # sudo mv /root/xorg.conf.new /etc/X11/xorg.conf
    # docker run -p 0.0.0.0:6080:80 -e USER=doro -e PASSWORD=password -v /dev/shm:/dev/shm dorowu/ubuntu-desktop-lxde-vnc:focal
}

if [ ! -z ${1} ]; then
    case ${1} in
    'allin')

        for i in $(typeset -f | awk '/ \(\) $/ && !/^main / {print $1}'); do
            eval $i
        done

        ;;
    'dict')
        install_dict
        ;;
    'proxy')
        install_proxy
        ;;
    'leak')
        install_dataleak
        ;;
    'rengine')
        install_allinoneplatform
        ;;
    'ui')
        install_xrdp
        ;;
    'scan')
        install_scan
        ;;
    *)
        echo "${RED}${HIGHLIGHT}[Error]${NC}: $1 was not included"
        echo "Supported:"
        typeset -f | awk '/ \(\) $/ && !/^main / {print $1}'
        ;;
    esac
fi

# if [ ! -z ${1} ]
# then

#     if [ "${1}" = "init" ]; then
#         install_dict
#     fi;

#     if [ "${1}" = "zap" ]; then
#         install_zap
#     fi;

#     if [ "${1}" = "nuclei" ]; then
#         install_dict
#     fi;

#     if [ "${1}" = "rengine" ]; then
#         install_rengine
#     fi;

# else
#     sudo ${*:1}
# fi
